import pandas as pd

samplesDF = pd.read_csv("samplesheet.tsv", sep="\t", index_col="Sample")
SAMPLES = []
sampleFq1 = {}
sampleFq2 = {}


for x in samplesDF.index:
	SAMPLES.append(x)
	sampleFq1[x] = samplesDF.loc[x,'fq1']
	sampleFq2[x] = samplesDF.loc[x,'fq2']

def get_sample(wildcards):
	return(wildcards.sample)

def get_fastq1(wildcards):
	return(samplesDF.loc[wildcards.sample,'fq1'])

def get_fastq2(wildcards):
	return(samplesDF.loc[wildcards.sample,'fq2'])

#Added by FS: modified rule all
rule all:
        input:
                #expand("MetaPhlan/{sample}.txt", sample=SAMPLES),
                expand("MetaPhlan/{sample}_relabund.txt", sample=SAMPLES),
                "MetaPhlan/merged_metaphlan_table.txt",
                #expand("HumanN/{sample}", sample=SAMPLES),
                expand("HumanN/{sample}/{sample}_pathabundance_relab.tsv", sample=SAMPLES),
                #"HumanN/merged_metacyc_table.tsv",


rule fastp:
	input:
		r1 = get_fastq1,
		r2 = get_fastq2

	output:
		r1 = "fastp/{sample}.r1.fq.gz",
		r2 = "fastp/{sample}.r2.fq.gz",
		json = "fastp/{sample}.json",
		html = "fastp/{sample}.html"

	log: "logs/{sample}.fastp.log"
	threads: 8
	params:
		sn = get_sample
	shell:
		"mkdir -p fastp \n"
		"/home/jiapengc/.conda/envs/QC/bin/fastp --in1 {input.r1} "
		"--in2 {input.r2} "
		"--out1 {output.r1} "
		"--out2 {output.r2} "
		"--json {output.json} "
		"--html {output.html} "
		"--thread 8"
        

rule map2human: #draft
	input:
		r1 = "fastp/{sample}.r1.fq.gz",
		r2 = "fastp/{sample}.r2.fq.gz"
	output:
		"{sample}.sam"
	shell:
		"/home/jiapengc/.conda/envs/biobakery3/bin/bowtie2 -x /data/databases/human/GRCh38_latest_genomic.fna "
		"-1 {input.r1} -2 {input.r2} "
		"-S {sample}.sam "
		"--un-conc-gz {sample}_host_removed.fastq.gz "
		"--sensitive --threads 8"


rule sam2bam: #draft
	input:
		"{sample}.sam"
	output:
		"{sample}.bam"
	shell:
		"/home/jiapengc/.conda/envs/QC/bin/samtools view -bS --threads 8 out.sam > out.bam"
		"/home/jiapengc/bin/bamstats --cpu 5 --input out.bam > bamstat.json"


rule catFq:
	input:
		r1 = "fastp/{sample}.r1.fq.gz",
		r2 = "fastp/{sample}.r2.fq.gz"

	output:
		r1r2fq = "catFq/{sample}.r1r2.fq"
	log: "logs/catFq.log"
	shell:
		"mkdir -p catFq \n"
		"cat {input.r1} {input.r2} > {output} 2> {log}"


rule MetaPhlan:
	input:
		fq = "catFq/{sample}.r1r2.fq"
	output:
		profiletxt = "MetaPhlan/{sample}.txt"
	log: "logs/{sample}.MetaPhlan.log"
	threads: 8
	shell:
		"mkdir -p MetaPhlan \n"
		"metaphlan --nproc 8 --offline --input_type fastq --output_file {output.profiletxt} {input.fq} > {log} 2>&1"

##Added by FS: Option of running MetaPhlan to produce relative abundance with read stats and include counts to non-bacteria
rule MetaPhlan_RelAbundance:
        input:
                fq = "catFq/{sample}.all4.fq"
		#note the catFQ input here is from a version where Kneaddata was used for QC/QA
        output:
                profiletxt = "MetaPhlan/{sample}_relabund.txt"
        log: 
		"logs/{sample}.MetaPhlan.relabund.log"
        threads: 10
        shell:
                "metaphlan --nproc 10 --input_type fastq --output_file {output.profiletxt} {input.fq} --add_virus -t rel_ab_w_read_stats > {log} 2>&1"

##Added by FS: Option to merge MetaPhlan into one feature table
##Note that MetaPhlan version 4 only merges default -t rel_ab tables
rule MetaPhlan_merge:
        input:
                table = expand("MetaPhlan/{sample}.txt", sample=SAMPLES)
        output:
                merged_table = "MetaPhlan/merged_metaphlan_table.txt"
        shell:
                "merge_metaphlan_tables.py {input.table} > {output.merged_table}"


rule humann: # conda activate /home/artemisl/.conda/envs/biobakery
	input:
		fq = "catFq/{sample}.r1r2.fq"
	log: "logs/{sample}.humann.stdouterr.log"
	threads: 8
	output:
		ofolder = "HumanN/{sample}"
	shell:
		"mkdir -p HumanN \n"
		"/home/artemisl/.conda/envs/biobakery/bin/humann --threads 8 --input {input.fq} --output {output.ofolder} > {log} 2>&1"


##Added by FS: normalize the pathabundance output files
##Note: input is again from cat Kneaddata
rule humann_renorm:
        input:
                pathabundance = "HumanN/{sample}/{sample}.all4_pathabundance.tsv"
        output:
                relab_table = "HumanN/{sample}/{sample}_pathabundance_relab.tsv"
        log: 
		"logs/{sample}.humann_renorm.log"
        shell:
             "humann_renorm_table --input {input.pathabundance} --output {output.relab_table} --units relab > {log} 2>&1"


#Added by FS: Merge into one feature table for MetaCyc rxn
##Does not work - need to troubleshoot
#rule humann_join_tables:
#        input:
#                pathabundance_relab_table = "/home/fatimas/MTG_analyses/StainBac_Clinical_MTG/HumanN/"
#        output:
#                merged_metacyc_table = "HumanN/merged_metacyc_table.tsv"
#        log: 
#               "logs/humann_join_tables.log"        
#        shell:
#            "/home/artemisl/.conda/envs/biobakery/bin/humann_join_tables -i {input.pathabundance_relab_table} --search-subdirectories --file_name pathabundance_relab  -o {output.merged_metacyc_table} > {log} 2>&1"
